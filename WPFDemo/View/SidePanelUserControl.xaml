<UserControl x:Class="WPFDemo.View.SidePanelUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="240">
    <!-- This StackPanel organizes its content from top to bottom. -->
    <StackPanel Width="240">
        <!-- This sets the 'Background' property of the StackPanel to a Linear Gradient going from white to blue and then black. -->
        <!-- This is an example of a property defined as a XML Element instead of a XML attribute, which is most commenly used, -->
        <!--  because it is more compact, however when the value that the property is set to is complicated, a XML element has to be used. -->
        <StackPanel.Background>
            <LinearGradientBrush StartPoint="0,1">
                <GradientStop Color="White" Offset="0.0" />
                <GradientStop Color="CornflowerBlue" Offset="0.001" />
                <GradientStop Color="Blue" Offset="0.30" />
                <GradientStop Color="Blue" Offset="0.50" />
                <GradientStop Color="Blue" Offset="0.60" />
                <GradientStop Color="DarkBlue" Offset="0.999" />
                <GradientStop Color="Black" Offset="1" />
            </LinearGradientBrush>
        </StackPanel.Background>
        <!-- This GroupBox puts a visual line frame around the Undo/Redo Buttons. -->
        <GroupBox Header="Undo / Redo" Foreground="White" Margin="6">
            <!-- Grid with 2 columns, used to organize the Buttons to fill the whole with, taking an equal amount of space. -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <!-- The Undo Button is bound to the MainViewModels 'UndoCommand'. -->
                <Button Content="Undo" Command="{Binding UndoCommand}" Margin="6,4"/>
                <!-- The Redo Button is bound to the MainViewModels 'RedoCommand'. -->
                <!-- The 'Column' property is an attached property that the Button only has because it is a child of a Grid. -->
                <Button Grid.Column="1" Content="Redo" Command="{Binding RedoCommand}" Margin="6,4"/>
            </Grid>
        </GroupBox>
        <!-- This GroupBox puts a visual line frame around the Shape Controls. -->
        <GroupBox Header="Shapes" Foreground="White" Margin="6">
            <!-- This StackPanel organizes its content from top to bottom. -->
            <StackPanel>
                <!-- The 'Add shape' Button is bound to the MainViewModels 'AddShapeCommand'. -->
                <Button Content="Add shape" Command="{Binding AddShapeCommand}"/>
                <!-- This DataGrid (similar to an Excel sheet), is used to display and change the properties of the shapes. -->
                <!-- The DataGrid is bound to the MainViewModels 'Shapes' collection. -->
                <DataGrid x:Name="shapesControl" Height="140" ItemsSource="{Binding Shapes}" HeadersVisibility="Column" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False">
                    <DataGrid.Columns>
                        <!-- It is important to understand that the DataContext 'inside' the DataGrid is a 'Shape' object from the MainViewModels 'Shapes' collection, -->
                        <!--  which the DataGrid is bound to. -->
                        <!-- The DataGrids columns are bound to the properties of the current Shape. -->
                        <DataGridTextColumn Binding="{Binding Shape.Number}" Header="Number" Width="*" IsReadOnly="True"/>
                        <DataGridTextColumn Binding="{Binding Shape.X}" Header="X" Width="*"/>
                        <DataGridTextColumn Binding="{Binding Shape.Y}" Header="Y" Width="*"/>
                        <DataGridTextColumn Binding="{Binding Shape.Width}" Header="Width" Width="*"/>
                        <DataGridTextColumn Binding="{Binding Shape.Height}" Header="Height" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
                <!-- The 'Remove chosen shape' Button is bound to the MainViewModels 'RemoveShapeCommand'. -->
                <!-- An important part here is that the arguments to the Command are specified with the CommandParameter property, -->
                <!--  which in this case is bound to the 'SelectedItems' property of the 'shapesControl' DataGrid. -->
                <Button Content="Remove chosen shape" Command="{Binding RemoveShapeCommand}" CommandParameter="{Binding ElementName=shapesControl, Path=SelectedItems}"/>
            </StackPanel>
        </GroupBox>
        <!-- This GroupBox puts a visual line frame around the Line Controls. -->
        <GroupBox Header="Lines" Foreground="White" Margin="6">
            <!-- This StackPanel organizes its content from top to bottom. -->
            <StackPanel>
                <!-- The 'Add line' Button is bound to the MainViewModels 'AddLineCommand'. -->
                <Button Content="Add line" Command="{Binding AddLineCommand}"/>
                <!-- This DataGrid (similar to an Excel sheet), is used to display and change the properties of the lines. -->
                <!-- The DataGrid is bound to the MainViewModels 'Lines' collection. -->
                <DataGrid x:Name="linesControl" Height="140" ItemsSource="{Binding Lines}" HeadersVisibility="Column" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False">
                    <!-- It is important to understand that the DataContext 'inside' the DataGrid is a 'Line' object from the MainViewModels 'Lines' collection, -->
                    <!--  which the DataGrid is bound to. -->
                    <!-- The DataGrids columns are bound to the properties of the current Line. -->
                    <DataGrid.Columns>
                        <!-- The interesting thing about this data binding is that the UpdateSourceTrigger is set to PropertyChanged, -->
                        <!--  in contrast to the default which is lost focus, -->
                        <!--  it means that the bound property is changed whenever a change is made in the View, instead of when the focus is lost, -->
                        <!--  which is useful because of the column being a ComboBox column, and the user wants the change when something new is chosen, -->
                        <!--  not when enter is pressed as with the TextBox columns with the Shapes. -->
                        <!-- The DisplayMemberPath specifies how display the Shape that the Line goes From, -->
                        <!--  and '.' means to use the '.ToString()' method, that all objects have. -->
                        <DataGridComboBoxColumn Header="From" DisplayMemberPath="." Width="*" SelectedItemBinding="{Binding From, UpdateSourceTrigger=PropertyChanged}">
                            <!-- This specifies how the ComboBox column should be bound, using a style defined right here. -->
                            <!-- It is important to understand that the DataContext 'inside' the DataGrid is a 'Line' object from the MainViewModels 'Lines' collection, -->
                            <!--  which the DataGrid is bound to. -->
                            <DataGridComboBoxColumn.ElementStyle>
                                <Style TargetType="{x:Type ComboBox}">
                                    <!-- The interesting thing about this Data Binding is that it uses RelativeSource to bind to another DataContext, -->
                                    <!--  than that of the column. -->
                                    <!-- The RelativeSource finds the first parent element which is a UserControl, which is the SidePanelUserControl, -->
                                    <!--  then it uses that DataContext to bind to the MainViewModels 'Shapes' collection. -->
                                    <Setter Property="ItemsSource" Value="{Binding DataContext.Shapes, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                                </Style>
                            </DataGridComboBoxColumn.ElementStyle>
                            <!-- This specifies how the ComboBox should be bound, when it is being editied, -->
                            <!--  which could be different from when it is being displayed, but is not in this case. -->
                            <DataGridComboBoxColumn.EditingElementStyle>
                                <Style TargetType="{x:Type ComboBox}">
                                    <Setter Property="ItemsSource" Value="{Binding DataContext.Shapes, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                                </Style>
                            </DataGridComboBoxColumn.EditingElementStyle>
                        </DataGridComboBoxColumn>
                        <!-- This column is practically identical to the previous column, so look at the description for that column. -->
                        <DataGridComboBoxColumn Header="To" DisplayMemberPath="." Width="*" SelectedItemBinding="{Binding To, UpdateSourceTrigger=PropertyChanged}">
                            <DataGridComboBoxColumn.ElementStyle>
                                <Style TargetType="{x:Type ComboBox}">
                                    <Setter Property="ItemsSource" Value="{Binding DataContext.Shapes, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                                </Style>
                            </DataGridComboBoxColumn.ElementStyle>
                            <DataGridComboBoxColumn.EditingElementStyle>
                                <Style TargetType="{x:Type ComboBox}">
                                    <Setter Property="ItemsSource" Value="{Binding DataContext.Shapes, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                                </Style>
                            </DataGridComboBoxColumn.EditingElementStyle>
                        </DataGridComboBoxColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <!-- The 'Remove chosen lines' Button is bound to the MainViewModels 'RemoveLinesCommand'. -->
                <!-- An important part here is that the arguments to the Command are specified with the CommandParameter property, -->
                <!--  which in this case is bound to the 'SelectedItems' property of the 'linesControl' DataGrid. -->
                <Button Content="Remove chosen lines" Command="{Binding RemoveLinesCommand}" CommandParameter="{Binding ElementName=linesControl, Path=SelectedItems}"/>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>
