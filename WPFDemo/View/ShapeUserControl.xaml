<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:b="clr-namespace:WPFDemo.Behavior"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:cmd="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Platform"
             xmlns:local="clr-namespace:WPFDemo.View" x:Name="userControl" x:Class="WPFDemo.View.ShapeUserControl"
             mc:Ignorable="d"  Width="{Binding Shape.Width}" Height="{Binding Shape.Height}" 
             d:DesignHeight="100" d:DesignWidth="100">
    <!-- Above the size (Width and Height) is bound for the Shape. -->

    <!--The Behavior implement the move functionality for the node with the MoveBehavior class.-->
    <!--When using Behaviors the shape should have its own viewmodel, but for demo purposes it get exposed in Shape-->
    <i:Interaction.Behaviors>
        <b:MoveBehavior CanvasLeft="{Binding Shape.X}" CanvasTop="{Binding Shape.Y}" 
                        Command="{Binding MoveCommand }" OldCanvasTop="{Binding OldY}" OldCanvasLeft="{Binding OldX}"
                        IsMoveEnabled="{Binding DataContext.IsMoveable, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                        />
    </i:Interaction.Behaviors>


    <!-- The 'Shape' class is shown with a visual 'Shape' control, just like in the 02350SuperSimpleDemo. -->
    <!-- The important thing to understand is that the DataContext of this UserControl is a 'Shape' object, -->
    <!--  from the MainViewModels 'Shapes' collection because this 'UserControl' is used by the ItemsCollection in the MainWindow, -->
    <!--  and that ItemsCollection is bound to the MainViewModels 'Shapes' collection. -->
    <!-- This Grid is used to stack visuel elements on top of each other. -->
    <Grid>
        <!-- The lowest visual layer in the stack, is an ellipse that is only visible when a Line is being "drawn". -->
        <!-- Normally this ellipse is hidden, but when the third layer that is also an ellipse becomes partially transparent, -->
        <!--  this ellipse becomes visible and indicates with its color whether is has already been chosen as part of the Line drawing operation. -->
        <!-- The fill color is bound to the SelectedColor property on the Shape, which returns a Brush, which is a visual object that specifies the color. -->
        <!-- The reason brushes are used is because the color can be solid, which is the default or a gradient, or even others. -->
        <Ellipse Fill="{Binding Shape.SelectedColor}" Stroke="Transparent" StrokeThickness="6" />
        <!-- The second lowest layer in the stack are two texts ('choose' and 'by clicking'). -->
        <!-- The reason for the grid, is to divide the height of the Shape in 5 areas and putting the texts, -->
        <!--  in the second and fourth area. -->
        <!-- The purpose of the division is to avoid a overlap with the text in the fourth layer. -->
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="auto"/>
                <RowDefinition/>
                <RowDefinition Height="auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <TextBlock Grid.Row="1" Text="Choose" TextAlignment="Center" FontWeight="Bold"/>
            <TextBlock Grid.Row="3" Text="by clicking" TextAlignment="Center" FontWeight="Bold"/>
        </Grid>
        <!-- The third lowest layer in the stack is the ellipse normally seen for each Shape object, -->
        <!--  and it includes an animation, a gradient and the mouse event handlers. -->
        <!-- The opacity (tranparency) is bound to the MainViewModels ModeOpacity property, -->
        <!--  which makes this ellipse partially transparent, when a Line is being "drawn". -->
        <!-- The interesting thing about this Data Binding is that it uses RelativeSource to bind to another DataContext, -->
        <!--  than that of the ShapeUserControl. -->
        <!-- The RelativeSource finds the first parent element which is a Window, which is the MainWindow, -->
        <!--  then it uses that DataContext to bind to the MainViewModels 'ModeOpacity'. -->
        <Ellipse Opacity="{Binding DataContext.ModeOpacity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" Stroke="Purple" StrokeThickness="6" StrokeDashArray="3.1">
            <!-- The fill (background) color of the ellipse is a radial (center to edge) gradient (more than one color) brush. -->
            <Ellipse.Fill>
                <RadialGradientBrush>
                    <GradientStop Color="CornflowerBlue" Offset="0.0" />
                    <GradientStop  Color="Blue" Offset="0.60" />
                    <GradientStop Color="Navy" Offset="0.90" />
                </RadialGradientBrush>
            </Ellipse.Fill>
            <!-- This specifies the point of rotation for the animation that rotates the Shape. -->
            <!-- The data binding binds to the CenterX and CenterY properties of the Shape Model object. -->
            <Ellipse.RenderTransform>
                <RotateTransform CenterX="{Binding Shape.CenterX}" CenterY="{Binding Shape.CenterY}"/>
            </Ellipse.RenderTransform>
            <!-- This specifies the animation which is triggered by the ellipse being loaded, -->
            <!--  and it specifies that the ellipse should rotate its angle 360 degress every 7 seconds, repeating forever. -->
            <Ellipse.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.Angle" From="0" To="360" Duration="0:0:7" RepeatBehavior="Forever" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Ellipse.Triggers>
            
            
            <!--the Old move trigger system was located here but it have been replaced the MoveBehavior in the top-->

        </Ellipse>
        <!-- The fourth lowest, and therefore the highest layer of the stack is a text that shows the Number of the Shape. -->
        <!-- The Number is put in the middle with TextAlign and VerticalAlign. -->
        <!-- An interesting thing about this layer is that it is not HitTestVisisble, -->
        <!--  which means that it passes mouse and other events on to the layers below it. -->
        <TextBlock IsHitTestVisible="False" FontSize="20" Text="{Binding Number}" TextAlignment="Center" VerticalAlignment="Center" Foreground="White"/>
    </Grid>
</UserControl>
